{"name":"Exploring-data","tagline":"","body":"\r\n# Exploring Data\r\n\r\n## Where are we at?\r\nWe know how to\r\n- clean data\r\n- move it around\r\n- organize it\r\n- select the data we want\r\n- select the columns we want\r\n- convert between formats\r\n- and much more\r\n\r\nNow it's time for some fun exploring the data!\r\n\r\n## Three perspectives\r\n1. Inspect the data and its properties (e.g., what the raw data looks like, how many data points does it have, what kind of features)\r\n2. Compute descriptive statistics (e.g., text based output)\r\n3. Create visualizations from the data\r\n\r\n## Inspecting Data and Its Properties\r\nWe often need to know\r\n- How many data points and features does the data set have?\r\n- What does the raw data look like?\r\n- What kind of features does the data set have?\r\n- Can some of these features be treated as categorical or factors?\r\n\r\n### Checking whether you have a header or not\r\n\r\n\r\n```bash\r\ncd ~/data-science-at-the-command-line/book/ch07/data\r\n```\r\n\r\n    \r\n\r\n\r\n```bash\r\nls\r\n```\r\n\r\n    datatypes.csv  immigration.dat\tinvestments2.csv  iris.csv  tips.csv\r\n\r\n\r\n\r\n```bash\r\nhead iris.csv| csvlook\r\n```\r\n\r\n    |---------------+-------------+--------------+-------------+--------------|\r\n    |  sepal_length | sepal_width | petal_length | petal_width | species      |\r\n    |---------------+-------------+--------------+-------------+--------------|\r\n    |  5.1          | 3.5         | 1.4          | 0.2         | Iris-setosa  |\r\n    |  4.9          | 3.0         | 1.4          | 0.2         | Iris-setosa  |\r\n    |  4.7          | 3.2         | 1.3          | 0.2         | Iris-setosa  |\r\n    |  4.6          | 3.1         | 1.5          | 0.2         | Iris-setosa  |\r\n    |  5.0          | 3.6         | 1.4          | 0.2         | Iris-setosa  |\r\n    |  5.4          | 3.9         | 1.7          | 0.4         | Iris-setosa  |\r\n    |  4.6          | 3.4         | 1.4          | 0.3         | Iris-setosa  |\r\n    |  5.0          | 3.4         | 1.5          | 0.2         | Iris-setosa  |\r\n    |  4.4          | 2.9         | 1.4          | 0.2         | Iris-setosa  |\r\n    |---------------+-------------+--------------+-------------+--------------|\r\n\r\n\r\n### Inspect all the data\r\nSometimes you want to print the entire contents to the screen with the cat command. But this prints it all at once. We can use the less command.\r\n\r\n\r\n```bash\r\nless -S iris.csv\r\n```\r\n\r\nThe -S ensures that long lines are not wrapped. Use up and down to move through the file or by pressing the space.\r\n### Feature Names and Data Types\r\n\r\n\r\n```bash\r\nsed -e 's/,/\\n/g;q' iris.csv\r\n```\r\n\r\n    sepal_length\r\n    sepal_width\r\n    petal_length\r\n    petal_width\r\n    species\r\n\r\n\r\n### Don't forget we can define functions!\r\n\r\n\r\n```bash\r\nnames () { sed -e 's/,/\\n/g;q'; }\r\n```\r\n\r\n    \r\n\r\n\r\n```bash\r\nnames < iris.csv\r\n```\r\n\r\n    sepal_length\r\n    sepal_width\r\n    petal_length\r\n    petal_width\r\n    species\r\n\r\n\r\nYou can also use csvsql to determine the datatypes of the columns. Very important!\r\n\r\n\r\n```bash\r\nhead datatypes.csv\r\n```\r\n\r\n    a,b,c,d,e,f,g\r\n    2,0.0,FALSE,\"\"\"Yes!\"\"\",2011-11-11 11:00,2012-09-08,12:34\r\n    42,3.1415,TRUE,\"Oh, good\",2014-09-15,12/6/70,0:07 PM\r\n    66,,False,2198,,,\r\n\r\n\r\n\r\n```bash\r\ncsvsql datatypes.csv\r\n```\r\n\r\n    CREATE TABLE datatypes (\r\n    \ta INTEGER NOT NULL, \r\n    \tb FLOAT, \r\n    \tc BOOLEAN NOT NULL, \r\n    \td VARCHAR(8) NOT NULL, \r\n    \te DATETIME, \r\n    \tf DATE, \r\n    \tg TIME, \r\n    \tCHECK (c IN (0, 1))\r\n    );\r\n\r\n\r\nNow this isn't perfect and we need more information sometimes. Especially about factors and categories and things like zip codes. We can get some insight into this using csvcut, sort, and uniq. Or more conviently using the csvstat command.\r\n\r\n\r\n```bash\r\nPATH=$PATH:~/data-science-at-the-command-line/tools\r\n```\r\n\r\n    \r\n\r\n\r\n```bash\r\ncat iris.csv|csvcut -c species | body \"sort | uniq | wc -l\"\r\n```\r\n\r\n    species\r\n    3\r\n\r\n\r\n\r\n```bash\r\ncsvstat investments2.csv --unique\r\n```\r\n\r\n      1. company_permalink: 27342\r\n      2. company_name: 27324\r\n      3. company_category_list: 8759\r\n      4. company_market: 443\r\n      5. company_country_code: 150\r\n      6. company_state_code: 147\r\n      7. company_region: 1079\r\n      8. company_city: 3305\r\n      9. investor_permalink: 11176\r\n     10. investor_name: 11135\r\n     11. investor_category_list: 468\r\n     12. investor_market: 134\r\n     13. investor_country_code: 111\r\n     14. investor_state_code: 80\r\n     15. investor_region: 549\r\n     16. investor_city: 1198\r\n     17. funding_round_permalink: 41790\r\n     18. funding_round_type: 13\r\n     19. funding_round_code: 15\r\n     20. funded_at: 3595\r\n     21. funded_month: 295\r\n     22. funded_quarter: 121\r\n     23. funded_year: 34\r\n     24. raised_amount_usd: 6143\r\n\r\n\r\n## Computing Descriptive Statistics\r\n\r\n\r\n```bash\r\ncsvstat datatypes.csv\r\n```\r\n\r\n      1. a\r\n    \t<type 'int'>\r\n    \tNulls: False\r\n    \tValues: 2, 66, 42\r\n      2. b\r\n    \t<type 'float'>\r\n    \tNulls: True\r\n    \tValues: 0.0, 3.1415\r\n      3. c\r\n    \t<type 'bool'>\r\n    \tNulls: False\r\n    \tUnique values: 2\r\n    \t5 most frequent values:\r\n    \t\tFalse:\t2\r\n    \t\tTrue:\t1\r\n      4. d\r\n    \t<type 'unicode'>\r\n    \tNulls: False\r\n    \tValues: 2198, \"Yes!\", Oh, good\r\n      5. e\r\n    \t<type 'datetime.datetime'>\r\n    \tNulls: True\r\n    \tValues: 2011-11-11 11:00:00, 2014-09-15 00:00:00\r\n      6. f\r\n    \t<type 'datetime.date'>\r\n    \tNulls: True\r\n    \tValues: 2012-09-08, 1970-12-06\r\n      7. g\r\n    \t<type 'datetime.time'>\r\n    \tNulls: True\r\n    \tValues: 12:34:00, 12:07:00\r\n    \r\n    Row count: 3\r\n\r\n\r\n\r\n```bash\r\ncsvstat datatypes.csv --max\r\ncsvstat datatypes.csv --min\r\ncsvstat datatypes.csv --stdevs\r\ncsvstat datatypes.csv --freq\r\n# See book or documentation for full list\r\n\r\n\r\n```\r\n\r\n      1. a: 66\r\n      2. b: 3.1415\r\n      3. c: True\r\n      4. d: Oh, good\r\n      5. e: 2014-09-15 00:00:00\r\n      6. f: 2012-09-08\r\n      7. g: 12:34:00\r\n      1. a: 2\r\n      2. b: 0.0\r\n      3. c: False\r\n      4. d: \"Yes!\"\r\n      5. e: 2011-11-11 11:00:00\r\n      6. f: 1970-12-06\r\n      7. g: 12:07:00\r\n    usage: csvstat [-h] [-d DELIMITER] [-t] [-q QUOTECHAR] [-u {0,1,2,3}] [-b]\r\n                   [-p ESCAPECHAR] [-z MAXFIELDSIZE] [-e ENCODING] [-S] [-H] [-v]\r\n                   [--zero] [-y SNIFFLIMIT] [-c COLUMNS] [--max] [--min] [--sum]\r\n                   [--mean] [--median] [--stdev] [--nulls] [--unique] [--freq]\r\n                   [--len] [--count]\r\n                   [FILE]\r\n    csvstat: error: unrecognized arguments: --stdevs\r\n      1. a: { \"2\": 1, \"42\": 1, \"66\": 1 }\r\n      2. b: { \"3.1415\": 1, \"0.0\": 1 }\r\n      3. c: { \"False\": 2, \"True\": 1 }\r\n      4. d: { \"2198\": 1, \"\"Yes!\"\": 1, \"Oh, good\": 1 }\r\n      5. e: { \"2014-09-15 00:00:00\": 1, \"2011-11-11 11:00:00\": 1 }\r\n      6. f: { \"2012-09-08\": 1, \"1970-12-06\": 1 }\r\n      7. g: { \"12:07:00\": 1, \"12:34:00\": 1 }\r\n\r\n\r\nYou can also select a subset of features\r\n\r\n\r\n```bash\r\ncsvstat investments2.csv -c 2,13,19\r\n```\r\n\r\n      2. company_name\r\n    \t<type 'unicode'>\r\n    \tNulls: True\r\n    \tUnique values: 27324\r\n    \t5 most frequent values:\r\n    \t\tAviir:\t13\r\n    \t\tGalectin Therapeutics:\t12\r\n    \t\tRostima:\t12\r\n    \t\tFacebook:\t11\r\n    \t\tLending Club:\t11\r\n    \tMax length: 66\r\n     13. investor_country_code\r\n    \t<type 'unicode'>\r\n    \tNulls: True\r\n    \tUnique values: 111\r\n    \t5 most frequent values:\r\n    \t\tUSA:\t20806\r\n    \t\tGBR:\t2357\r\n    \t\tDEU:\t946\r\n    \t\tCAN:\t893\r\n    \t\tFRA:\t737\r\n    \tMax length: 15\r\n     19. funding_round_code\r\n    \t<type 'unicode'>\r\n    \tNulls: True\r\n    \tUnique values: 15\r\n    \t5 most frequent values:\r\n    \t\ta:\t7529\r\n    \t\tb:\t4776\r\n    \t\tc:\t2452\r\n    \t\td:\t1042\r\n    \t\te:\t384\r\n    \tMax length: 10\r\n    \r\n    Row count: 41799\r\n\r\n\r\nOne nice thing is csvstat also reports the number of rows. Also, don't forget that these are based on heuristics, so double check with manual inspection.\r\n\r\n## Note\r\nSo here the book goes on a tangent about a program called Rio, which allows us to run R and create plots at the command line. While this is sometimes necessary if you have a pipeline, I find this not as useful to just switching over to a language with plotting abilities. We will just use R notebooks, which I'll show you how to setup during lab/worksheet day. I will switch over to a R notebook now.\r\n\r\n\r\n```bash\r\nhead immigration.csv\r\n```\r\n\r\n    Period,Austria,Hungary,Belgium,Czechoslovakia,Denmark,France,Germany,Greece,Ireland,Italy,Netherlands,Norway,Sweden,Poland,Portugal,Romania,Soviet_Union,Spain,Switzerland,United_Kingdom,Yugoslavia,Other_Europe,TOTAL,\r\n    1891-1900,234081,181288,18167,0,50231,30770,505152,15979,388416,651893,26758,95015,226266,96720,27508,12750,505290,8731,31179,271538,0,282,3378014,\r\n    1901-1910,668209,808511,41635,0,65285,73379,341498,167519,339065,2045877,48262,190505,249534,0,69149,53008,1597306,27935,34922,525950,0,39945,7387494,\r\n    1911-1920,453649,442693,33746,3426,41983,61897,143945,184201,146181,1109524,43718,66395,95074,4813,89732,13311,921201,68611,23091,341408,1888,31400,4321887,\r\n    1921-1930,32868,30680,15846,102194,32430,49610,412202,51084,211234,455315,26948,68531,97249,227734,29994,67646,61742,28958,29676,339570,49064,42619,2463194,\r\n    1931-1940,3563,7861,4817,14393,2559,12623,144058,9119,10973,68028,7150,4740,3960,17026,3329,3871,1370,3258,5512,31572,5835,11949,377566,\r\n    1941-1950,24860,3469,12189,8347,5393,38809,226578,8973,19789,57661,14860,10100,10665,7571,7423,1076,571,2898,10547,139306,1576,8486,621147,\r\n    1951-1960,67106,36637,18575,918,10984,51121,477765,47608,43362,185491,52277,22935,21697,9985,19588,1039,671,7894,17675,202824,8225,16350,1325727,\r\n    1961-1970,20621,5401,9192,3273,9201,45237,190796,85969,32966,214111,30606,15484,17116,53539,76065,3531,2465,44659,18453,213822,20381,11604,1124492,\r\n\r\n\r\n## Visualizations\r\nWe are now using the R programming language and specifically, I want to show you some examples using a program called ggplot.\r\n\r\nFirst thing is we need to modify the data we are going to plot. We could do that in a bash terminal, but you should know that you can call bash from R using the system function.\r\n\r\n\r\n```R\r\nsetwd(\"~/data-science-at-the-command-line/book/ch07/data\")\r\n```\r\n\r\nSee the book for a break down of this command, but we need to use our command line magic to change the file for easier input into R.\r\n\r\n\r\n```R\r\nsystem(\"sed -re '/^#/d;s/\\t/,/g;s/,-,/,0,/g;s/Region/Period/' immigration.dat > immigration.csv\")\r\n```\r\n\r\nNow we are ready to plot!\r\n\r\n\r\n```R\r\ndf = read.csv('immigration.csv')\r\n```\r\n\r\n\r\n```R\r\nlibrary(ggplot2)\r\nlibrary(reshape2)\r\n```\r\n\r\n\r\n```R\r\ndf.long = melt(df,id=\"Period\",variable.name=\"Country\",value.name=\"Count\")\r\n\r\n```\r\n\r\n\r\n\r\n\r\n<ol class=list-inline>\r\n\t<li>Austria</li>\r\n\t<li>Hungary</li>\r\n\t<li>Belgium</li>\r\n\t<li>Czechoslovakia</li>\r\n\t<li>Denmark</li>\r\n\t<li>France</li>\r\n\t<li>Germany</li>\r\n\t<li>Greece</li>\r\n\t<li>Ireland</li>\r\n\t<li>Italy</li>\r\n\t<li>Netherlands</li>\r\n\t<li>Norway</li>\r\n\t<li>Sweden</li>\r\n\t<li>Poland</li>\r\n\t<li>Portugal</li>\r\n\t<li>Romania</li>\r\n\t<li>Soviet_Union</li>\r\n\t<li>Spain</li>\r\n\t<li>Switzerland</li>\r\n\t<li>United_Kingdom</li>\r\n\t<li>Yugoslavia</li>\r\n\t<li>Other_Europe</li>\r\n</ol>\r\n\r\n\r\n\r\n\r\n\r\n```R\r\nggplot(df.long[which(df.long$Country %in% c('Denmark','Norway','Netherlands')),]) + geom_bar(aes(Country,Count,fill=Period), stat=\"identity\") + \r\n scale_fill_brewer(palette=\"Set1\") +\r\n labs(x=\"Country of origin\",y=\"Immigration by decade\")\r\n\r\n```\r\n\r\n\r\n![svg](output_8_0.svg)\r\n\r\n\r\n\r\n```R\r\ncolnames(df)\r\n```\r\n\r\n\r\n\r\n\r\n<ol class=list-inline>\r\n\t<li>'Period'</li>\r\n\t<li>'Austria'</li>\r\n\t<li>'Hungary'</li>\r\n\t<li>'Belgium'</li>\r\n\t<li>'Czechoslovakia'</li>\r\n\t<li>'Denmark'</li>\r\n\t<li>'France'</li>\r\n\t<li>'Germany'</li>\r\n\t<li>'Greece'</li>\r\n\t<li>'Ireland'</li>\r\n\t<li>'Italy'</li>\r\n\t<li>'Netherlands'</li>\r\n\t<li>'Norway'</li>\r\n\t<li>'Sweden'</li>\r\n\t<li>'Poland'</li>\r\n\t<li>'Portugal'</li>\r\n\t<li>'Romania'</li>\r\n\t<li>'Soviet_Union'</li>\r\n\t<li>'Spain'</li>\r\n\t<li>'Switzerland'</li>\r\n\t<li>'United_Kingdom'</li>\r\n\t<li>'Yugoslavia'</li>\r\n\t<li>'Other_Europe'</li>\r\n\t<li>'TOTAL'</li>\r\n\t<li>'X'</li>\r\n</ol>\r\n\r\n\r\n\r\n\r\n## Density Plot\r\n\r\n\r\n```R\r\ndf = read.csv('tips.csv')\r\n```\r\n\r\n\r\n```R\r\nggplot(df) + geom_density(aes(tip/bill * 100,fill=sex),alpha=0.3) + xlab(\"percent\")\r\n```\r\n\r\n\r\n![svg](output_12_0.svg)\r\n\r\n\r\n## Scatter Example\r\n\r\n\r\n```R\r\ndf = read.csv('tips.csv')\r\n```\r\n\r\n\r\n```R\r\nggplot(df) + geom_point(aes(bill,tip,color=time))\r\n```\r\n\r\n\r\n![svg](output_15_0.svg)\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}